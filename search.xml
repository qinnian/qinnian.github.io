<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机图形学知识点总结</title>
      <link href="/ComputerGraphicsNote.html"/>
      <url>/ComputerGraphicsNote.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、填空题"><a href="#一、填空题" class="headerlink" title="一、填空题"></a>一、填空题</h2><blockquote><p>考点：</p><p>图形学中涉及的坐标系、光栅扫描显示中的帧缓存的计算，平面几何投影的类型，曲线的逼近和拟合，基本几何变换定义</p></blockquote><h2 id="二、选择题"><a href="#二、选择题" class="headerlink" title="二、选择题"></a>二、选择题</h2><blockquote><p>考点：</p><p>颜色模型，图形变换，光照（漫反射、镜面反射、环境光、折射），齐次坐标，根据几何变换矩阵分析变换结果</p></blockquote><h2 id="三、问答题"><a href="#三、问答题" class="headerlink" title="三、问答题"></a>三、问答题</h2><blockquote><p>考点：</p><p>图形学、图像学、模式识别学科的概念。阴极射线管显示器的构成及各部分功能。</p></blockquote><h2 id="四、程序补充题"><a href="#四、程序补充题" class="headerlink" title="四、程序补充题"></a>四、程序补充题</h2><blockquote><p>考点：<br>基本几何变换相关函数、程序设计</p></blockquote><h2 id="五、计算题"><a href="#五、计算题" class="headerlink" title="五、计算题"></a>五、计算题</h2><blockquote><p>考点：</p><p>根据4个点的坐标，构造三次贝塞尔曲线，贝塞尔曲线的参数表达式，根据参数t的值计算曲线上点的坐标值。 </p><p>给定某图形的顶点坐标，绕任一直线做镜像，旋转等变换，变换矩阵、变换过程、变换后的坐标值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 考试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 2019 配置 OpenGL</title>
      <link href="/VS2019.html"/>
      <url>/VS2019.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载VS2019"><a href="#1-下载VS2019" class="headerlink" title="1. 下载VS2019"></a>1. 下载VS2019</h2><p>去<a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener">官网</a>，选择 <code>VS 2019</code> 社区版进行下载。</p><p><img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5dc2d2298e0e2e3ee93f3d7b.jpg" alt="选择Community"></p><h2 id="2-下载-GLEW"><a href="#2-下载-GLEW" class="headerlink" title="2. 下载 GLEW"></a>2. 下载 GLEW</h2><p>去<a href="http://glew.sourceforge.net/" target="_blank" rel="noopener">官网</a>，下载 Binaries Windows 32-bit and 64-bit。</p><p><img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5dc2d3e58e0e2e3ee93f91c2.jpg" alt="下载 GLEW"></p><h2 id="3-下载GLFW"><a href="#3-下载GLFW" class="headerlink" title="3. 下载GLFW"></a>3. 下载GLFW</h2><p>去<a href="http://www.glfw.org/download.html" target="_blank" rel="noopener">官网</a>，下载 <code>Windows pre-compiled binaries 32-bit</code>（64 位会出现莫名其妙的问题）</p><p><img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5dc2d49d8e0e2e3ee93fafd4.jpg" alt="下载GLFW"></p><h2 id="4-配置-OpenGL"><a href="#4-配置-OpenGL" class="headerlink" title="4. 配置 OpenGL"></a>4. 配置 OpenGL</h2><h3 id="4-1-新建-C-空项目"><a href="#4-1-新建-C-空项目" class="headerlink" title="4.1 新建 C++ 空项目"></a>4.1 新建 C++ 空项目</h3><p>打开 vs2019，<code>文件 —&gt; 新建 -&gt; 项目 -&gt; 空项目</code> ，命名为 <code>OpenGLExercise01</code></p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H2e49b6b7207e4cb9be68e99a24cbe4adB.jpg" alt="新建 C++ 空项目"></p><h3 id="4-2-创建-main-cpp-源文件"><a href="#4-2-创建-main-cpp-源文件" class="headerlink" title="4.2 创建 main. cpp 源文件"></a>4.2 创建 main. cpp 源文件</h3><p>右侧 <code>解决方案资源管理器</code> 下，<code>源文件 —&gt; 添加 —&gt; 新建项</code> ，创建名为 <code>main.cpp</code>源文件</p><h3 id="4-3-开始配置-OpenGL"><a href="#4-3-开始配置-OpenGL" class="headerlink" title="4.3 开始配置 OpenGL"></a>4.3 开始配置 OpenGL</h3><h4 id="4-3-1-添加-include-文件"><a href="#4-3-1-添加-include-文件" class="headerlink" title="4.3.1 添加 include 文件"></a>4.3.1 添加 include 文件</h4><ul><li><p>右键项目 <code>OpenGLExercise</code> ，在弹出的选项中，单击 <code>属性</code></p></li><li><p>点击 <code>C/C++ —&gt; 常规 —&gt; 附加包含目录 —&gt; 编辑</code></p><p><img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5dc2de7e8e0e2e3ee940ffe3.jpg" alt="找到编辑1"></p></li><li><p>点击添加头文件。分别添加下载的 <code>glew</code> 和 <code>glfw</code> 文件夹下的 <code>include</code> 文件夹 (include 文件夹下是我们需要的头文件)，点击 <code>确定</code></p><p> <img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5dc2dfe58e0e2e3ee9411d2f.jpg" alt="添加include文件"></p></li></ul><h4 id="4-3-2-添加-lib-文件"><a href="#4-3-2-添加-lib-文件" class="headerlink" title="4.3.2 添加 lib 文件"></a>4.3.2 添加 lib 文件</h4><ul><li><p>点击 <code>链接器 —&gt; 常规 —&gt; 附加包含目录 —&gt; 编辑</code></p><p>  <img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5dc2e2458e0e2e3ee9417479.jpg" alt="找到编辑2"></p></li><li><p>分别添加下载的 <code>glew</code> 和 <code>glfw</code> 文件夹下的 <code>lib</code> 文件夹。</p><ul><li><p>当添加 <code>glew</code> 时，当选到 <code>lib</code> 文件夹后请继续选择，<code>lib -&gt; Release -&gt; Win32</code> , 请选择 <code>Win32</code> 后点击 “选择文件夹”（x64 会有莫名其妙的问题）</p></li><li><p>当添加 <code>glfw</code> 时，请选择对应版本，2019 版本请选择 <code>lib-vc2019</code></p></li></ul><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/Hb0fe1313ad4943b797cbdd59b5781188m.jpg" alt="添加lib文件"></p></li></ul><h4 id="4-3-3-添加库依赖项"><a href="#4-3-3-添加库依赖项" class="headerlink" title="4.3.3 添加库依赖项"></a>4.3.3 添加库依赖项</h4><ul><li><p>点击 <code>链接器 —&gt; 输入 —&gt; 附加依赖项 —&gt; 编辑</code></p><p><img src="./medias/loading.gif" data-original="https://puui.qpic.cn/fans_admin/0/3_1192510060_1573053768870/0" alt="找到编辑3"></p></li><li><p>输入如下:</p><p>  opengl32.lib</p><p>  glfw3.lib</p><p>  glew32s.lib</p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H776c29d1cce246318c26973b322882f6b.jpg" alt="添加输入"></p></li><li><p>最后确定</p></li></ul><h2 id="5-程序调试"><a href="#5-程序调试" class="headerlink" title="5. 程序调试"></a>5. 程序调试</h2><h3 id="5-1-初步运行"><a href="#5-1-初步运行" class="headerlink" title="5.1 初步运行"></a>5.1 初步运行</h3><p>在之前的 main.cpp 中添加如下代码：（即初始化一个 OpenGL 窗口）</p><pre><code>#include&lt;iostream&gt;#define GLEW_STATIC#include &lt;GL/glew.h&gt;#include&lt;GLFW\glfw3.h&gt;using namespace std;int main(int argc, char** argv[]){/*glewExperimental = GL_TRUE;if (glewInit()!=GLEW_OK)  {  cout &lt;&lt; &quot;failed to initalize GLEW&quot; &lt;&lt; endl;  return -1;  }*/  glfwInit();//初始化  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);//配置GLFW  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);//配置GLFW  glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);//  glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);  GLFWwindow* window = glfwCreateWindow(800, 600, &quot;LearnOpenGL&quot;, nullptr, nullptr);  if (window==nullptr)  {    cout &lt;&lt; &quot;Failed to create GLFW window&quot; &lt;&lt; endl;    glfwTerminate();    return -1;  }  glfwMakeContextCurrent(window);  while (!glfwWindowShouldClose(window))  {    glfwPollEvents();    glfwSwapBuffers(window);  }  glfwTerminate();  return 0;}</code></pre><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H524182b59ab441b1bd3031fa4738d9c5u.jpg" alt="窗口显示"></p><h3 id="5-2-解决库冲突"><a href="#5-2-解决库冲突" class="headerlink" title="5.2 解决库冲突"></a>5.2 解决库冲突</h3><p>当我们关掉程序回到 “错误列表” 中会发现</p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H5ff3c8a718bf4ba3bf4421889ba4c59d0.jpg" alt="出现问题"></p><p>点击属性，找到“编辑”</p><p><img src="./medias/loading.gif" data-original="https://puui.qpic.cn/fans_admin/0/3_1409075683_1573191343465/0" alt="解决库冲突"></p><p>输入如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MSVCRT.lib</span><br><span class="line">LIBCMT.lib</span><br></pre></td></tr></table></figure><p>最后，点击一下右下角的应用，再点击确定。</p><p><img src="./medias/loading.gif" data-original="https://puui.qpic.cn/fans_admin/0/3_15881579_1573191547079/0" alt="完善"></p><p>注：如果往后还有库冲突，解决方法同理。</p><h3 id="5-3-解决引言中的链接错误"><a href="#5-3-解决引言中的链接错误" class="headerlink" title="5.3 解决引言中的链接错误"></a>5.3 解决引言中的链接错误</h3><p>出现警告：<code>glew32s.lib(glew.obj) : warning LNK4099: 未找到 PDB“vc120.pdb”(使用“glew32s.lib(glew.obj)”或在“F:\QinNian&#39;GitHub\Computer_Graphics\OpenGL_Learn\01_入门\01_OpenGL 环境配置\OpenGLExercise01\Debug\vc120.pdb”中寻找)；正在链接对象，如同没有调试信息一样</code></p><p>如果确认不需要<code>PDB</code>, 即不需要调试开源库, 完全可以在设置里将<code>/Zi</code>或<code>/ZI</code>去掉, 这样即能消除<code>warning</code>也能提升开源库编译速度</p><p>将 <code>glew</code> 工程配置成不生成调试信息，或把调试信息直接生成到<code>.obj</code>文件中（而非<code>.pdb</code>文件）即可.</p><p><code>项目属性 --&gt; 配置属性 --&gt; C/C++ --&gt; 常规 --&gt; 调试信息格式</code></p><blockquote><p>空表示不生成调试信息，</p><p><code>C7</code>把调试信息直接生成到<code>.obj</code>文件中</p><p>默认的<code>Zi</code>生成<code>.pdb</code>文件</p></blockquote><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H544488a404b3411c998ef5bdf8cc3462N.jpg" alt="调试信息格式"></p><h2 id="6-写在最后"><a href="#6-写在最后" class="headerlink" title="6. 写在最后"></a>6. 写在最后</h2><p>我哭了，终于弄好了！！！</p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H544488a404b3411c998ef5bdf8cc3462N.jpg" alt="成功"></p>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 2010 配置 OpenGL</title>
      <link href="/VS2010.html"/>
      <url>/VS2010.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h2><p>确保自己安装了 <code>VS2010</code> (安装路径自己不要忘记)</p><h2 id="2-下载GLUT"><a href="#2-下载GLUT" class="headerlink" title="2. 下载GLUT"></a>2. 下载GLUT</h2><blockquote><p><code>GLUT</code>（英文全写：<code>OpenGL Utility Toolkit</code>）是一个处理OpenGL程式的工具库，负责处理和底层操作系统的呼叫以及I/O。</p></blockquote><p>Windows环境下的GLUT下载地址： <a href="http://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip" target="_blank" rel="noopener">点这里</a></p><p>解压后会得到5个文件：</p><blockquote><p><code>glut.h</code>、<code>glut.lib</code>、<code>glut32.lib</code>、<code>glut.dll</code>、<code>glut32.dll</code></p></blockquote><h2 id="3-VS2010-环境配置"><a href="#3-VS2010-环境配置" class="headerlink" title="3. VS2010 环境配置"></a>3. VS2010 环境配置</h2><h3 id="3-1-移动文件（以我的安装路径为例）"><a href="#3-1-移动文件（以我的安装路径为例）" class="headerlink" title="3.1 移动文件（以我的安装路径为例）"></a>3.1 移动文件（以我的安装路径为例）</h3><ol><li><p><code>glut.h</code> 复制到 <code>D:\VS 2010\VC\include\GL</code></p></li><li><p><code>glut.lib</code>、<code>glut32.lib</code>复制到 <code>D:\VS 2010\VC\lib</code></p></li><li><p><code>glut.dll</code>、<code>glut32.dll</code>复制到<code>C:\Windows\System32</code>(32位)或<code>C:\Windows\SysWOW64</code>(64位)</p></li></ol><h3 id="3-2-附加依赖项"><a href="#3-2-附加依赖项" class="headerlink" title="3.2 附加依赖项"></a>3.2 附加依赖项</h3><ol><li><p>打开 <code>VS 2010</code> ,随便打开或者新建一个项目</p></li><li><p>打开<code>附加依赖项</code>这个框</p><blockquote><p><code>project</code>-&gt;<code>project property</code>-&gt; <code>Configuration Properties</code>-&gt;<code>Linker</code>-&gt;<code>Input</code>-&gt;<code>Additional Dependencies</code>（英文版）</p><p> 项目-&gt;属性-&gt; 配置属性-&gt;链接器-&gt;输入-&gt;附加依赖项 （中文版）</p></blockquote></li><li><p>添加</p><p>  <code>opengl32.lib</code></p><p>  <code>glu32.lib</code></p><p>  <code>glut32.lib</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客园美化</title>
      <link href="/CnblogsBeautify.html"/>
      <url>/CnblogsBeautify.html</url>
      
        <content type="html"><![CDATA[<p>个人博客可以简单分为两种：</p><ul><li><p>第三方托管博客：例如像<code>博客园</code>、<code>CSDN</code>、<code>掘金</code>、<code>简书</code>、<code>知乎专栏</code>等。</p></li><li><p>个人的独立博客：例如像自己买域名、搭建空间和程序建立的。</p></li></ul><p>大三上学期，我想选择一个博客平台，作为自己的在线笔记本，分享一些学到的东西。像 <code>CSDN</code>、<code>博客园</code>、<code>简书</code>、<code>知乎专栏</code>、<code>掘金</code>第三方服务的博客平台中，它的用户交互做的也比较好，文章可以直接在上面发表，百度也能搜索的到。</p><p>相对而言，我还是比较喜欢 <code>博客园</code> 多一点，它广告比较少，而且支持 <code>HTML</code> 标签,不过确实有些页面是有些显得老旧了。</p><p>最近发现 <code>博客园</code> 可以自定义美化样式，现在我的 <code>博客园</code> 主要用于整理我的 <code>2021考研笔记</code> ，所有文章在 2021 年才会公开。为增加阅读体验，主题样式简单。</p><p>我的 <code>Github</code> 代码 <a href="https://github.com/qinnian/Cnblogs-Beautify" target="_blank" rel="noopener">https://github.com/qinnian/Cnblogs-Beautify</a> ，欢迎 <code>fork</code> 。</p><p>博客园示例：<a href="https://www.cnblogs.com/qinnian/" target="_blank" rel="noopener">See_You_In_BUPT</a></p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/Hba08f0941c6842f9b1759afb37baf496l.jpg" alt="博客园"></p><p>虽然在 <code>博客园</code> 的普通用户体验已经趋于完美，但是它的缺点是不自由，会受到平台的各种限制，而且个性化不足。</p><p>而自己购买 <code>域名</code> 和 <code>服务器</code> ，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我一个大三学生而言，也是没有这样的精力和时间。</p><p>这就引出了第三种选择，基于 <code>开源框架</code> 搭建博客，然后直接在 <code>github page</code> 平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护。</p><p>示例：<a href="https://www.qinnian.xyz/" target="_blank" rel="noopener">我的新博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建教程</title>
      <link href="/CreateBlog.html"/>
      <url>/CreateBlog.html</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>2019年9月开始搭建博客，这两个月的时间学习各种知识。这次用 <code>Hexo+Github</code> 把博客搭建完成。现在将自己搭建过程中所学详细记录。</p><hr><h2 id="第一部分-搭建"><a href="#第一部分-搭建" class="headerlink" title="第一部分 搭建"></a>第一部分 搭建</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896202815778784" target="_blank" rel="noopener">【廖雪峰Git教程】</a></p><p>git官网下载，<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Download git</a>，下载后会有一个 <code>Git Bash</code> 的命令行工具，以后就用这个工具来使用git。</p><p>安装好后，用 <code>git --version</code> 来查看一下版本</p><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/36Z1JDyKTx7wbXm.png" alt="检查git版本"></p><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p><code>Hexo</code>基于<code>Node.js</code>，需要安装一下<code>Node.js</code>和里面的<code>npm</code>工具。</p><p>Nodejs选择LTS版本,安装选项全部默认，一路点击<code>Next</code>。<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">【Node.js下载地址】</a></p><p>安装后，按 <code>Win+R</code> 打开命令提示符 输入<code>cmd</code></p><pre><code>node -vnpm -v</code></pre><p>检查一下有没有安装成功(出现序列号就安装完成了)</p><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/TPMfvpUWNSC3Xie.png" alt="检查Node.js和npm工具"></p><blockquote><p>windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd</p></blockquote><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a></p><p>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><p>前面git和nodejs安装好后，就可以安装hexo了</p><ol><li><p>创建一个文件夹Blog，用来存放自己的博客文件，在这个文件夹下直接右键git bash打开。</p></li><li><p>输入 <code>npm install -g hexo-cli</code> 安装Hexo。安装完后输入 <code>hexo -v</code> 验证是否安装成功。</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/qGpWsJvMwIA9bro.png" alt="检查是否安装Hexo"></p></li><li><p>初始化一下hexo,即初始化我们的网站，输入<code>hexo init</code>初始化文件夹。然后，接着输入<code>npm install</code>安装必备的组件。</p></li><li><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器。</p></li><li><p>浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">【http://localhost:4000/】</a> 就可以看到我们的博客了，按ctrl+c关闭本地服务器。</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/NkiHKo4AVWhdCR9.png" alt="页面效果"></p></li></ol><p>新建完成后，指定文件夹MyBlog目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：模版文件。当你创建一篇新的文章时，hexo会依据模版文件进行创建，主要用在你想在每篇文章都添加一些共性的内容的情况下</li><li>source：用来存放你的文章。除了文章还有一些主要的资源，比如文章里的图片，文件等等东西。这个文件夹最好定期做一个备份，丢了它，整个站点就废了。</li><li>themes：主题文件夹</li><li>_config.yml 站点配置文件。很多全局配置都在这个文件中</li><li>package.json 应用数据。可以看出hexo版本信息，以及它所默认或者说依赖的一些组件</li></ul><h3 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4.GitHub创建个人仓库"></a>4.GitHub创建个人仓库</h3><ol><li><p>注册一个github账号<a href="https://github.com/" target="_blank" rel="noopener">【Github官网】</a></p></li><li><p>我的主页 <a href="https://github.com/qinnian" target="_blank" rel="noopener">https://github.com/qinnian</a> ，那么我的用户名为“qinnian”</p></li><li><p>新建一个名为 <code>用户名.github.io</code> 的仓库</p></li><li><p>将来网站访问地址就是 <a href="http://qinnian.github.io" target="_blank" rel="noopener">http://qinnian.github.io</a></p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/3ivgEz2pBFdsbIL.png" alt="创建仓库"></p></li></ol><h3 id="5-配置SSH-key"><a href="#5-配置SSH-key" class="headerlink" title="5.配置SSH key"></a>5.配置SSH key</h3><p>使用ssh key来解决本地和服务器的连接问题。ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上</p><ol><li><p>输入 <code>~/. ssh</code> 检查本机是否存在的ssh密钥。</p></li><li><p>设置user.name和user.email配置信息</p><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre></li><li><p>生成ssh密钥文件：</p><pre><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></pre></li><li><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开C盘用户目录，找到 <code>.ssh\id_rsa.pub</code> 文件，记事本打开并复制里面的内容。</p></li><li><p>打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; <a href="https://github.com/settings/keys" target="_blank" rel="noopener">New SSH key</a>：将刚复制的内容粘贴到key那里，<code>title</code>随便填，保存。</p></li><li><p>在 git bash 输入 <code>ssh -T git@github.com</code> 检验是否搭建完成。</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/nGKMZPw47otFajk.png" alt="配置SSH key 成功"></p></li></ol><h3 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6.将hexo部署到GitHub"></a>6.将hexo部署到GitHub</h3><p>我们就可以将<code>hexo</code>和<code>GitHub</code>关联起来，也就是将<code>hexo</code>生成的文章部署到<code>GitHub</code>上，打开<code>Blog</code>根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。</p><p>修改最后一行的配置：</p><pre><code>deploy:  type: git  repo: https://github.com/qinnian/qinnian.github.io.git  branch: master</code></pre><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可，就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>。</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>然后</p><pre><code>hexo clean    //清除了你之前生成的东西hexo generate  //生成静态文章，可以用 hexo g 缩写 hexo deploy   //部署文章，可以用 hexo d 缩写 </code></pre><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/NGtspZ5uYSADb6w.png" alt="网页"></p><h3 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7.设置个人域名"></a>7.设置个人域名</h3><p>现在你的个人网站的地址是 <code>qinnian.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><ol><li><p>首先你得购买一个专属域名(我在腾讯买的，微信支付)</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/pe4lxrYKSbaQf9M.png" alt="image.png"></p></li><li><p>打开你本地博客<code>/source</code>目录，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行 <code>hexo g</code> 、 <code>hexo d</code> 上传到github。</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/jskNyKVPM31oECx.png" alt="CNAME"></p></li><li><p>这时候你的<code>Github</code>项目根目录应该会出现一个名为<code>CNAME</code>的文件了。然后打开你的<code>github</code>博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，你也会发现自己的域名 (例如我的是qinnian.xyz）。</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/cvVO4bpwNSKEG7l.png" alt="settings"></p></li><li><p>过不了多久，再打开你的浏览器，输入你自己的专属域名，就可以看到搭建的网站啦！</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/IdG7SVYf6msPnOh.png" alt="域名设置成功"></p></li></ol><h3 id="8-发布文章"><a href="#8-发布文章" class="headerlink" title="8.发布文章"></a>8.发布文章</h3><ol><li><p>在<code>Blog</code>根目录下右键打开 <code>git bash</code> ，安装一个扩展 <code>npm i hexo-deployer-git</code></p></li><li><p>新建一篇文章输入 <code>hexo new post &quot;title&quot;</code>。比如要新建一个叫《博客搭建教程》的文章,则 <code>hexo new post &quot;博客搭建教程&quot;</code>打开 <code>Blog\source\_posts</code> 的目录，下面多了一个文件夹和一个 <code>.md</code> 文件，就是你的文章文件。</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/WGKBPg75uZdh4rJ.png" alt="文章文件"></p></li><li><p>根目录下</p><pre><code>hexo g //生成静态网页hexo s //本地预览效果hexo d //上传到 github</code></pre><p>这时打开你的 <code>Blog</code> 主页就能看到发布的文章</p></li></ol><hr><h2 id="第二部分-配置"><a href="#第二部分-配置" class="headerlink" title="第二部分 配置"></a>第二部分 配置</h2><h3 id="1-Blog目录-config-yml修改"><a href="#1-Blog目录-config-yml修改" class="headerlink" title="1.Blog目录_config.yml修改"></a>1.Blog目录_config.yml修改</h3><p>在文件根目录下的 _config.yml ，就是整个 hexo 框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置描述</a>。</p><h4 id="（1）网站-Site"><a href="#（1）网站-Site" class="headerlink" title="（1）网站 Site"></a>（1）网站 Site</h4><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/QCn6vN4hlWB7rTt.png" alt="Site"></p><h4 id="（2）网址-URL"><a href="#（2）网址-URL" class="headerlink" title="（2）网址 URL"></a>（2）网址 URL</h4><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/1OCia7Brfk8DmIJ.png" alt="URL"></p><blockquote><p>在这里，你需要把 <code>url</code> 改成自己的网站域名。</p></blockquote><h4 id="（3）目录-Directory"><a href="#（3）目录-Directory" class="headerlink" title="（3）目录 Directory"></a>（3）目录 Directory</h4><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/KkWyrfbdUPYO962.png" alt="Directory"></p><blockquote><p>刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</p></blockquote><h4 id="（4）文章-Writing"><a href="#（4）文章-Writing" class="headerlink" title="（4）文章 Writing"></a>（4）文章 Writing</h4><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/9ktpur2dTbKQPzF.png" alt="Writing"></p><blockquote><p>刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</p></blockquote><h4 id="（5）分页-per-page"><a href="#（5）分页-per-page" class="headerlink" title="（5）分页 per_page"></a>（5）分页 per_page</h4><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/w856Gu3lTaOmoIh.png" alt="per_page"></p><blockquote><p>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。</p></blockquote><h4 id="（6）主题-Themes"><a href="#（6）主题-Themes" class="headerlink" title="（6）主题 Themes"></a>（6）主题 Themes</h4><p>在 <code>themes</code> 这个文件夹下默认给你安装的是 <code>lanscape</code> 这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在 <code>themes</code> 文件夹下，再修改这个主题参数就可以了。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>matery</code> 的文件夹复制到你 <code>Blog</code> 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/iZ4sFR93GvwIzgf.png" alt="matery"></p><blockquote><p>修改 <code>theme</code> 的值：<code>theme: matery</code></p><p>文件名和主题参数名称一致就行，这边我重命名为<code>matery</code></p></blockquote><p>最后打开网页</p><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/inKgOVkQHfeYzUh.png" alt="网页效果"></p><h3 id="2-新建文章模板修改"><a href="#2-新建文章模板修改" class="headerlink" title="2.新建文章模板修改"></a>2.新建文章模板修改</h3><p>为了新建文章方便，我们可以修改一下文章模板，建议将 <code>/scaffolds/post.md</code> 修改为如下代码：</p><pre><code>---title: {{ title }}             #  文章标题，强烈建议填写此选项date: {{ date }}               #  发布时间，强烈建议填写此选项，且最好保证全局唯一author: Qin Nian               #  文章作者img: /source/images/xxx.jpg    #  文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.coverImg:                      #  表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片top: true                      #  推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章toc: true                      #  是否开启 TOC，需在主题的 _config.yml 中激活了 toc 选项cover: false                   #  表示该文章是否需要加入到首页轮播封面中mathjax: false                 #  是否开启数学公式支持,需在主题的 _config.yml 中激活password: 文章阅读密码          #  SHA256 加密。需在主题的 config.yml 中激活 verifyPasswordsummary:                       #  文章摘要，自定义的文章摘要内容categories:                    #  文章分类，建议一篇文章一个分类tags:                          #  文章标签，一篇文章可以多个标签    - Markdown    - Typora---</code></pre><p>这样新建文章后 一些 <code>Front-matter</code> 参数不用你自己补充了，修改对应信息就可以了</p><p>注意:</p><blockquote><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><h3 id="3-新建分类页面"><a href="#3-新建分类页面" class="headerlink" title="3.新建分类页面"></a>3.新建分类页面</h3><h4 id="（1）categories-页"><a href="#（1）categories-页" class="headerlink" title="（1）categories 页"></a>（1）categories 页</h4><blockquote><p>用来展示所有分类的页面</p></blockquote><pre><code>hexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/categories/index.md</p><pre><code>---title: categoriesdate: 2019-10-12 00:00:00type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><h4 id="（2）tags-页"><a href="#（2）tags-页" class="headerlink" title="（2）tags 页"></a>（2）tags 页</h4><blockquote><p>用来展示所有标签的页面</p></blockquote><pre><code>hexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/tags/index.md</p><pre><code>---title: tagsdate: 2019-10-12 00:00:00type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre><h4 id="（3）about-页"><a href="#（3）about-页" class="headerlink" title="（3）about 页"></a>（3）about 页</h4><blockquote><p>用来展示关于我和我的博客信息的页面</p></blockquote><pre><code>hexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/about/index.md</p><pre><code>---title: aboutdate: 2019-10-12 00:00:00type: &quot;about&quot;layout: &quot;about&quot;---</code></pre><h4 id="（4）contact-页"><a href="#（4）contact-页" class="headerlink" title="（4）contact 页"></a>（4）contact 页</h4><blockquote><p>用来展示留言板信息的页面</p></blockquote><p>留言板功能依赖于第三方评论系统，激活你的评论系统才有效果。</p><p>并且在主题的 _config.yml 文件中，第 19 至 21 行的“菜单”配置，取消关于留言板的注释</p><pre><code>hexo new page &quot;contact&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/contact/index.md</p><pre><code>---title: contactdate: 2019-10-12 00:00:00type: &quot;contact&quot;layout: &quot;contact&quot;---</code></pre><h4 id="（5）friends-页"><a href="#（5）friends-页" class="headerlink" title="（5）friends 页"></a>（5）friends 页</h4><blockquote><p>用来展示友情连接信息的页面</p></blockquote><pre><code>hexo new page &quot;friends&quot;</code></pre><p>编辑你刚刚新建的页面文件 /source/friends/index.md：</p><pre><code>---title: friendsdate: 2019-10-12 00:00:00type: &quot;friends&quot;layout: &quot;friends&quot;---</code></pre><p>同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre><code>[    {        &quot;avatar&quot;: &quot;https://ss1.baidu.com/70cFfyinKgQFm2e88IuM_a/forum/pic/item/7c1ed21b0ef41bd55eec003854da81cb38db3dbb.jpg&quot;,        &quot;name&quot;: &quot;STD_BUPT&quot;,        &quot;introduction&quot;: &quot;钦念考研&quot;,        &quot;url&quot;: &quot;https://www.cnblogs.com/qinnian/&quot;,        &quot;title&quot;: &quot;冲鸭&quot;    }]</code></pre><h4 id="（6）添加404页面"><a href="#（6）添加404页面" class="headerlink" title="（6）添加404页面"></a>（6）添加404页面</h4><p>首先在 <code>/source/</code> 目录下新建一个<code>404.md</code>，内容如下：</p><pre><code>---title: 404date: 2019-08-5 16:41:10type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;---</code></pre><p>然后在 <code>/themes/matery/layout/</code> 目录下新建一个 <code>404.ejs</code> 文件，内容如下：</p><pre><code>&lt;style type=&quot;text/css&quot;&gt;    /* don&apos;t remove. */    .about-cover {        height: 75vh;    }&lt;/style&gt;&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                &lt;div class=&quot;brand&quot;&gt;                    &lt;div class=&quot;title center-align&quot;&gt;                        404                    &lt;/div&gt;                    &lt;div class=&quot;description center-align&quot;&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $(&apos;.bg-cover&apos;).css(&apos;background-image&apos;, &apos;url(/medias/banner/&apos; + new Date().getDay() + &apos;.jpg)&apos;);&lt;/script&gt;</code></pre><h3 id="4-Themes目录-config-yml修改"><a href="#4-Themes目录-config-yml修改" class="headerlink" title="4.Themes目录_config.yml修改"></a>4.Themes目录_config.yml修改</h3><h4 id="（1）菜单"><a href="#（1）菜单" class="headerlink" title="（1）菜单"></a>（1）菜单</h4><p>（a）配置基本菜单导航的名称、路径url和图标icon</p><ul><li><p>菜单导航名称可以是中文也可以是英文(如：Index或主页)</p></li><li><p>图标icon 可以在 <code>Font Awesome</code> 中查找</p><p>  <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/29/Na4ByH96TwWsmCp.png" alt="menu"></p></li></ul><p>（b）二级菜单配置方法</p><ul><li><p>在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children)</p></li><li><p>在children下创建二级菜单的 名称name,路径url和图标icon.</p></li><li><p>注意每个二级菜单模块前要加 -.</p></li><li><p>注意缩进格式</p><pre><code>menu:Index:    url: /    icon: fas fa-homeTags:    url: /tags    icon: fas fa-tagsCategories:    url: /categories    icon: fas fa-bookmarkArchives:    url: /archives    icon: fas fa-archiveAbout:    url: /about    icon: fas fa-user-circle-oFriends:    url: /friends    icon: fas fa-address-bookMedias:    icon: fas fa-list    children:    - name: Musics        url: /musics        icon: fas fa-music    - name: Movies        url: /movies        icon: fas fa-film    - name: Books        url: /books        icon: fas fa-book    - name: Galleries        url: /galleries        icon: fas fa-image</code></pre></li></ul><h4 id="（2）建站时间"><a href="#（2）建站时间" class="headerlink" title="（2）建站时间"></a>（2）建站时间</h4><blockquote><p>修改时间，格式为:月/日/年 时:分:秒.</p></blockquote><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/javqefMAw9DZb3c.png" alt="time"></p><h4 id="（3）首页封面"><a href="#（3）首页封面" class="headerlink" title="（3）首页封面"></a>（3）首页封面</h4><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/BkteLAawiR9hrfP.png" alt="cover"></p><h4 id="（4）首页”梦想”"><a href="#（4）首页”梦想”" class="headerlink" title="（4）首页”梦想”"></a>（4）首页”梦想”</h4><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/AVmXSgRfi9Ent7y.png" alt="dream"></p><h4 id="（5）首页”音乐”"><a href="#（5）首页”音乐”" class="headerlink" title="（5）首页”音乐”"></a>（5）首页”音乐”</h4><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/wrIueFO7v6mkRiU.png" alt="music 1"></p><ul><li>网易云音乐网页版，任意找到一首歌点进去播放，可以在地址栏拿到音乐ID号</li><li>音乐外链 <code>http://music.163.com/song/media/outer/url?id=XXXXXX.mp3</code>， XXXXXX就是歌曲ID号。</li><li>最后封面图也可以按F12去找页面元素的链接。</li></ul><p><img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/xOcvmIY8UKabQFA.png" alt="music 2"></p><blockquote><p>在source &gt; _data 下新建 musics.json , 填入音乐模块的代码</p></blockquote><pre><code>[    {        &quot;name&quot;: &quot;XXX&quot;,        &quot;artise&quot;: &quot;XX&quot;,        &quot;url&quot;: &quot;https://music.163.com/song/media/outer/url?id=XXXX.mp&quot;,        &quot;cover&quot;: &quot;&quot;    },     {        &quot;name&quot;: &quot;XXX&quot;,        &quot;artise&quot;: &quot;XX&quot;,        &quot;url&quot;: &quot;https://music.163.com/song/media/outer/url?id=XXXX.mp&quot;,        &quot;cover&quot;: &quot;https://p1.music.126.net/yPddBydvnfWXTG2z2FYB2Q==/109951164354997570.jpg&quot;    }]</code></pre><h4 id="（6）文章评论"><a href="#（6）文章评论" class="headerlink" title="（6）文章评论"></a>（6）文章评论</h4><ol><li><p>GitHub上去新建一个仓库用于存放评论的内容</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/5q6rDnYJ2p47THx.png" alt="creat repository"></p></li><li><p>在设置中打开isue功能</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/ZBcdQtOAe1uXxIq.png" alt="setting"></p></li><li><p>发现默认是打开的</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/ZBcdQtOAe1uXxIq.png" alt="isue"></p></li><li><p>需要注册一个<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">Github Application</a></p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/hiO78KAfY9lMwdV.png" alt="Github Application"></p><blockquote><p>注意两个URL就是你网站的域名。应用名称随便写，描述随便写。</p></blockquote></li><li><p>完成之后便到了如下页面,其中 <code>Client ID</code> 和 <code>Client Secret</code> 是我们需要的东西</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/Zox6m1qSGpJbPBv.png" alt="Client"></p></li><li><p>最后设置 Theme 目录下<code>_config.yml</code>文件</p><p> <img src="./medias/loading.gif" data-original="https://i.loli.net/2019/10/30/FgUDQ9yOToXKRNr.png" alt="Gitalk"></p></li></ol><h4 id="（7）其他设置"><a href="#（7）其他设置" class="headerlink" title="（7）其他设置"></a>（7）其他设置</h4><blockquote><p>在此文件下更改其他设置，查看 <code>Hexo</code> 官网</p></blockquote><h2 id="第三部分-优化"><a href="#第三部分-优化" class="headerlink" title="第三部分 优化"></a>第三部分 优化</h2><h3 id="1、添加博客天气插件"><a href="#1、添加博客天气插件" class="headerlink" title="1、添加博客天气插件"></a>1、添加博客天气插件</h3><p>中国天气网：<a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">https://cj.weather.com.cn/plugin/pc</a></p><p>将下面代码插入 <code>/themes/matery/layout/_partial/layout.ejs</code> 中</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    WIDGET = {FID: &apos;1tFpFZ5Mtj&apos;}&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://apip.weatherdt.com/float/static/js/r.js?v=1111&quot;&gt;&lt;/script&gt;</code></pre><h3 id="2、添加博客动态标签"><a href="#2、添加博客动态标签" class="headerlink" title="2、添加博客动态标签"></a>2、添加博客动态标签</h3><p>原理就是给博客增加一个事件判断，如下图所示：</p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/Hd6ddeb7a011245e7b8428d1615a9e755v.jpg" alt="点击前"></p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H56ac52b1ea1e4defb993c9030463d9d8T.jpg" alt="点击后"></p><p>打开 <code>themes/matery/layout/layout.ejs</code>，在对应位置添加如下代码：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    var OriginTitile = document.title,        st;    document.addEventListener(&quot;visibilitychange&quot;, function () {        document.hidden ? (document.title = &quot;点击前的文字&quot;, clearTimeout(st)) : (document.title =            &quot;点击后的文字&quot;, st = setTimeout(function () {                document.title = OriginTitile            }, 3e3))    })&lt;/script&gt;</code></pre><blockquote><p>记得先 <code>hexo clean</code> 再 <code>hexo g</code> ，防止出错.</p></blockquote><h3 id="3、修改主题颜色"><a href="#3、修改主题颜色" class="headerlink" title="3、修改主题颜色"></a>3、修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre><code>/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}@-webkit-keyframes rainbow {/* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h3 id="4、谷歌-SEO"><a href="#4、谷歌-SEO" class="headerlink" title="4、谷歌 SEO"></a>4、谷歌 SEO</h3><h4 id="（1）SEO-定义"><a href="#（1）SEO-定义" class="headerlink" title="（1）SEO 定义"></a>（1）SEO 定义</h4><p><code>SEO</code>（Search Engine Optimization）即搜索引擎优化，</p><p>维基百科上给出的定义如下：</p><blockquote><p>搜索引擎优化是一种通过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。</p></blockquote><p>SEO 可从两方面入手：</p><ul><li><p>1.技术手段：</p><p>  通过研究搜索引擎的规则，利用某些技巧提升 SEO 效果；</p></li><li><p>2.内容质量：</p><p>  内容质量是更长久的提升SEO效果的核心，这里直接引用维基百科中的内容：</p><blockquote><p>站点经常地更新，有用、原创的内容，和创建几个实用、有意义的导入链接，获得相当可观数目的基本搜索流量不是什么难事。</p></blockquote><blockquote><p>当站点拥有有用的内容，其它站点员自然而然会链接至该站，进而增加访客它的网页级别和访客流。当访客发现一个有用的网站，他们倾向于利用电子邮件或者及时消息链接介绍给其它访客。</p></blockquote><blockquote><p>总括来说，增进网站质量的搜索引擎优化实现很可能比直接查找操控搜索排名手段的短期实现要活得长久。顶尖的搜索引擎优化员们找寻的目标与搜索引擎追求发扬光大的东西二者不约而同。他们是：相关性、对他们用户有用的内容。换句话说，即向用户提供优质有用，而且独特的数据，以内容营销的方法，软性地吸引潜在的客户，自自然然地找到你的网页。</p></blockquote></li></ul><h4 id="（2）验证网站"><a href="#（2）验证网站" class="headerlink" title="（2）验证网站"></a>（2）验证网站</h4><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><p>打开谷歌搜索，在搜索框里输入自己的博客 URL</p><pre><code>site: qinnian.xyz</code></pre><p>如果提示说：</p><pre><code>找不到和您查询的 site: qinnian.xyz</code></pre><p>说明未被收录。</p><p>我遇到的情况是谷歌是自动收录了，可能之前做过百度的SEO，虽然没有成功，但是配置了些乱七八糟的东西。如图：</p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/Hdf96c6528b3b453893b0403b4c15baf2b.jpg" alt="谷歌查询"></p><h5 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h5><p>若未被谷歌收录，则需在谷歌搜索进行配置。前往 <a href="https://search.google.com/search-console?resource_id=sc-domain%3Aqinnian.xyz" target="_blank" rel="noopener">Google Search Console</a>，登录谷歌账号。</p><p>添加属性，将博客地址 <code>site:https://qinnian.xyz/</code> 添至相应位置。</p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/Hf8e077db0a0e424c846c9e5e985ada4c0.jpg" alt="域名解析"></p><p>谷歌搜索有多种验证方式，这里我选择的是腾讯域名解析。（这个步骤不多解释了，和前面添加域名一样）</p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H58422a8124394b4eb87c10f575277313n.jpg" alt="成功登录"></p><h5 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h5><p>添加站点地图作用是告诉搜索引擎你的网站结构等信息，让搜索引擎更智能抓取内容。</p><ul><li><p>第一步</p><p>  打开 <code>Git</code>，进入到根目录，输入如下命令安装：</p><pre><code>$ npm install hexo-generator-sitemap --save</code></pre></li><li><p>第二步</p><p>  打开 Hexo 目录下的 _config.yml 文件，在最下方添加如下字段：</p><pre><code># 自动生成sitemapsitemap:path: sitemap.xml</code></pre><p>  重新编译：</p><pre><code>$ hexo generate</code></pre><p>  重新部署：</p><pre><code>$ hexo deploy</code></pre></li><li><p>第三步：</p><p>  进入 Google Search Console - 抓取 - 站点地图，点击「添加/测试站点地图」，输入你的博客网址。若无报错则站点地图提交成功</p><p>  <img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/Hbb406baaf56e4597893c3b4f5e05bf50S.jpg" alt="无错误提示"></p></li></ul><h4 id="（3）提升排名"><a href="#（3）提升排名" class="headerlink" title="（3）提升排名"></a>（3）提升排名</h4><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><p>博客根目录 <code>_config.yml</code> 文件进行如下修改，关键字英文逗号隔开：</p><pre><code># Sitetitle: 网站名称description: 网站描述author: 作者姓名subtitle: 作者简介language: zh-CNtimezone:keywords: Web,HTML # 博客关键字</code></pre><p>文章中加入关键字：</p><pre><code>---title: ###date: ###categories: ###tags: ###keywords: ###description: ###---</code></pre><h5 id="路径简化"><a href="#路径简化" class="headerlink" title="路径简化"></a>路径简化</h5><p><code>Hexo</code> 默认的文章链接形式为 <code>domain/year/month/day/postname</code>，默认就是一个四级 <code>url</code>，并且可能造成 <code>url</code> 过长，对搜索引擎是十分不友好的。我们可以改成 <code>domain/postname</code> 的形式。编辑站点 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code> 字段改为：</p><pre><code>permalink: :title.html</code></pre><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/H2ad1dd960f8446f5a87b62aa480f6089n.jpg" alt="路径简化"></p><p><img src="./medias/loading.gif" data-original="https://ae01.alicdn.com/kf/Hd7ea88a6c8b24bdaaee9851f89193b7aM.jpg" alt="效果展示"></p><h4 id="（4）网站监测"><a href="#（4）网站监测" class="headerlink" title="（4）网站监测"></a>（4）网站监测</h4><p>登录谷歌站长管理平台 <a href="https://search.google.com/search-console/" target="_blank" rel="noopener">Google Search Console</a></p><blockquote><p>关于“科学上网的方式”，这里不作分享</p></blockquote><p><img src="./medias/loading.gif" data-original="https://pic2.superbed.cn/item/5de87735f1f6f81c50b8522d.jpg" alt="Google Search Console 效果"></p><p>再次搜索我的网站地址：</p><pre><code>site: qinnian.xyz</code></pre><p><img src="./medias/loading.gif" data-original="https://pic1.superbed.cn/item/5de8a8bef1f6f81c50c0d8f2.jpg" alt="谷歌SEO"></p><p>这边可以对比一下百度搜索的效果</p><blockquote><p>提交链接并且站点被百度收录估计要花一个月的时间，额！所以我暂时先搁置了。</p></blockquote><p><img src="./medias/loading.gif" data-original="https://pic1.superbed.cn/item/5de8a94ff1f6f81c50c12492.jpg" alt="百度SEO"></p><h3 id="5、网站加载速度优化"><a href="#5、网站加载速度优化" class="headerlink" title="5、网站加载速度优化"></a>5、网站加载速度优化</h3><h4 id="（1）网站测速"><a href="#（1）网站测速" class="headerlink" title="（1）网站测速"></a>（1）网站测速</h4><p>在浏览谷歌网站过程中，发现了几个网站测速工具：</p><ul><li><p><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">Google PageSpeed Insights</a></p><blockquote><p><code>Google PageSpeed Insights</code> 一款可以分析网页速度瓶颈谷歌浏览器插件</p></blockquote><ul><li><p>手机端评分 52 分</p><p><img src="./medias/loading.gif" data-original="https://pic2.superbed.cn/item/5de8b032f1f6f81c50c28d28.jpg" alt="手机版"><br><img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5de8b0c2f1f6f81c50c2a669.jpg" alt="移动优化建议"></p></li><li><p>电脑端评分 89 分<br><img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5de8b056f1f6f81c50c29383.jpg" alt="电脑版"></p><p><img src="./medias/loading.gif" data-original="https://pic2.superbed.cn/item/5de8b07ff1f6f81c50c29a3f.jpg" alt="桌面优化建议"></p></li></ul></li><li><p><a href="https://tools.pingdom.com/" target="_blank" rel="noopener">Pingdom</a></p><blockquote><p><code>pingdom</code>全面的网站监测服务网站,可测速和ping跟踪路由,可以免费监测1个站点,最短1分钟监测一次。</p></blockquote><p>  网页评测 71 分<br>  <img src="./medias/loading.gif" data-original="https://pic2.superbed.cn/item/5de8b298f1f6f81c50c30a04.jpg" alt="Pingdom 测试"></p></li><li><p><a href="https://gtmetrix.com/" target="_blank" rel="noopener">GTmetrix</a> </p><blockquote><p><code>GTmetrix</code> 主要优点在于提供了丰富的详细的测量结果，并建议如何来优化网页中每个元素的，最重要的是会根据网站的具体情况，直接告诉你导致网站加载速度变慢的根源在哪里</p></blockquote><p>  <img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de8b5e8f1f6f81c50c38cc0.jpg" alt="GTmetrix 测试"></p></li></ul><blockquote><p>综上，我的网站加载速度慢的原因为：</p><p>1、服务器不稳定速度慢</p><blockquote><p>我使用的是<code>GitHub</code>代替服务器，<code>GitHub</code>本身就是国外的，在浏览速度确实比不上国内网站。于是我想，如果利用 <code>github pages</code> 和 <code>coding pages</code> 双部署是不是可以解决这个问题。未来可以考虑选择大的空间服务商,买最好的云服务。</p></blockquote><p>2、站点存在大量的JS调用：</p><blockquote><p>当站点上有太多的JS调用时，它将增加页面响应时间，因为访问者在访问站点时将增加JS程序调用的响应时间。精简代码是个不错的选择，所以我选择了 <code>Gulp</code> 实现代码压缩。</p></blockquote><p>3、站点图片大，图片外链多</p><blockquote><p>图片加载时间是造成网站访问速度慢的最大因素。这一点，当初建站的时候就已经意识到这个问题。</p></blockquote><blockquote><p>所以我就把网站图片存储到第三方空间。之前用国外的 <a href="https://sm.ms/" target="_blank" rel="noopener">SMMS图床</a> ,现在用国内的 <a href="https://www.superbed.cn/" target="_blank" rel="noopener">聚合图床</a> 。相对而言还是建议用国内的图床，访问速度更快些。</p></blockquote><blockquote><p>如果是重要图片尽量上传到自己空间，以免外链发生错误图片无法显示。外链图片速度很慢肯定是影响网站打开速度的，建议减少数量。(未来我准备在GitHub 建一个仓库自己做图床，这样最保险)</p></blockquote></blockquote><h4 id="（2）图片懒加载"><a href="#（2）图片懒加载" class="headerlink" title="（2）图片懒加载"></a>（2）图片懒加载</h4><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>例如我这篇博客，如果一个页面的图片很多，那么如何来提高博客的访问速度呢？</p><p>懒加载，通俗点讲就是当你翻到图片的时候再加载那张图片，而不是以下将本页面的所有图片都加载完。</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>参照开源仓库：<a href="https://github.com/Troy-Yang/hexo-lazyload-image" target="_blank" rel="noopener">hexo-lazyload-image</a></p><p>在你的 <code>Blog</code> 目录下，执行以下命令：</p><pre><code>npm install hexo-lazyload-image --save</code></pre><p>然后在你的 <code>Blog</code> 目录的配置文件 <code>_config.yml</code>  中添加配置:</p><pre><code>lazyload:  enable: true  onlypost: false  loadingImg: ./medias/loading.gif</code></pre><blockquote><p>onlypost</p><blockquote><p>是否仅文章中的图片做懒加载, 如果为 <code>false</code>, 则主题中的其他图片, 也会做懒加载, 如头像, <code>logo</code> 等任何图片。</p></blockquote></blockquote><blockquote><p>loadingImg  图片未加载时的代替图</p><blockquote><p>不填写使用默认加载图片, 如果需要自定义，添填入 <code>loading</code> 图片地址，如果是本地图片，不要忘记把图片添加到你的主题目录下。<code>Matery</code>主题需将图片放到 <code>\themes\Matery\source\medias</code> 目录下, 然后引用时: <code>loadingImg: ./medias/图片文件名</code></p></blockquote></blockquote><p>到这“图片懒加载”就完成了！截图如下</p><p><img src="./medias/loading.gif" data-original="https://pic1.superbed.cn/item/5de8e4f5f1f6f81c50ccccd1.jpg" alt="loading 效果图"></p><h4 id="（3）Gulp实现代码压缩"><a href="#（3）Gulp实现代码压缩" class="headerlink" title="（3）Gulp实现代码压缩"></a>（3）Gulp实现代码压缩</h4><blockquote><p>安装 <code>Gulp</code> 过程中，使用 <code>npm</code> 进行安装，结果出现了各种 <code>err</code> 异常，估计是被。。墙了，这里推荐使用国内镜像解决这个问题。</p></blockquote><pre><code>#淘宝镜像npm config set registry https://registry.npm.taobao.org  </code></pre><p>首先我们需要安装Gulp插件和功能模块</p><pre><code>#安装gulpnpm install gulp --save  </code></pre><p><img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de8eb8cf1f6f81c50cf4654.jpg" alt="安装 gulp 结果"></p><pre><code># 安装功能模块npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</code></pre><p><img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de8f139f1f6f81c50d116b8.jpg" alt="安装功能模块"></p><pre><code># 额外的功能模块npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --save</code></pre><p><img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de8f139f1f6f81c50d116b8.jpg" alt="安装额外的功能模块"></p><p>接下来在博客的根目录下新建gulpfile.js文件，并复制下面的内容到文件中。</p><pre><code>var gulp = require(&quot;gulp&quot;);var debug = require(&quot;gulp-debug&quot;);var cleancss = require(&quot;gulp-clean-css&quot;); //css压缩组件var uglify = require(&quot;gulp-uglify&quot;); //js压缩组件var htmlmin = require(&quot;gulp-htmlmin&quot;); //html压缩组件var htmlclean = require(&quot;gulp-htmlclean&quot;); //html清理组件var imagemin = require(&quot;gulp-imagemin&quot;); //图片压缩组件var changed = require(&quot;gulp-changed&quot;); //文件更改校验组件var gulpif = require(&quot;gulp-if&quot;); //任务 帮助调用组件var plumber = require(&quot;gulp-plumber&quot;); //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)var isDebug = true; //是否调试显示 编译通过的文件var gulpBabel = require(&quot;gulp-babel&quot;);var es2015Preset = require(&quot;babel-preset-es2015&quot;);var del = require(&quot;del&quot;);var Hexo = require(&quot;hexo&quot;);var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象// 清除public文件夹gulp.task(&quot;clean&quot;, function() {return del([&quot;public/**/*&quot;]);});// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return// 创建静态页面 （等同 hexo generate）gulp.task(&quot;generate&quot;, function() {return hexo.init().then(function() {    return hexo    .call(&quot;generate&quot;, {        watch: false    })    .then(function() {        return hexo.exit();    })    .catch(function(err) {        return hexo.exit(err);    });});});// 启动Hexo服务器gulp.task(&quot;server&quot;, function() {return hexo    .init()    .then(function() {    return hexo.call(&quot;server&quot;, {});    })    .catch(function(err) {    console.log(err);    });});// 部署到服务器gulp.task(&quot;deploy&quot;, function() {return hexo.init().then(function() {    return hexo    .call(&quot;deploy&quot;, {        watch: false    })    .then(function() {        return hexo.exit();    })    .catch(function(err) {        return hexo.exit(err);    });});});// 压缩public目录下的js文件gulp.task(&quot;compressJs&quot;, function() {return gulp    .src([&quot;./public/**/*.js&quot;, &quot;!./public/libs/**&quot;]) //排除的js    .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;)))    .pipe(gulpif(isDebug, debug({ title: &quot;Compress JS:&quot; })))    .pipe(plumber())    .pipe(    gulpBabel({        presets: [es2015Preset] // es5检查机制    })    )    .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩    .pipe(gulp.dest(&quot;./public&quot;)); //输出到目标目录});// 压缩public目录下的css文件gulp.task(&quot;compressCss&quot;, function() {var option = {    rebase: false,    //advanced: true,               //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]    compatibility: &quot;ie7&quot; //保留ie7及以下兼容写法 类型：String 默认：&apos;&apos;or&apos;*&apos; [启用兼容模式； &apos;ie7&apos;：IE7兼容模式，&apos;ie8&apos;：IE8兼容模式，&apos;*&apos;：IE9+兼容模式]    //keepBreaks: true,             //类型：Boolean 默认：false [是否保留换行]    //keepSpecialComments: &apos;*&apos;      //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀};return gulp    .src([&quot;./public/**/*.css&quot;, &quot;!./public/**/*.min.css&quot;]) //排除的css    .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;)))    .pipe(gulpif(isDebug, debug({ title: &quot;Compress CSS:&quot; })))    .pipe(plumber())    .pipe(cleancss(option))    .pipe(gulp.dest(&quot;./public&quot;));});// 压缩public目录下的html文件gulp.task(&quot;compressHtml&quot;, function() {var cleanOptions = {    protect: /&lt;\!--%fooTemplate\b.*?%--&gt;/g, //忽略处理    unprotect: /&lt;script [^&gt;]*\btype=&quot;text\/x-handlebars-template&quot;[\s\S]+?&lt;\/script&gt;/gi //特殊处理};var minOption = {    collapseWhitespace: true, //压缩HTML    collapseBooleanAttributes: true, //省略布尔属性的值  &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;    removeEmptyAttributes: true, //删除所有空格作属性值    &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;    removeScriptTypeAttributes: true, //删除&lt;script&gt;的type=&quot;text/javascript&quot;    removeStyleLinkTypeAttributes: true, //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;    removeComments: true, //清除HTML注释    minifyJS: true, //压缩页面JS    minifyCSS: true, //压缩页面CSS    minifyURLs: true //替换页面URL};return gulp    .src(&quot;./public/**/*.html&quot;)    .pipe(gulpif(isDebug, debug({ title: &quot;Compress HTML:&quot; })))    .pipe(plumber())    .pipe(htmlclean(cleanOptions))    .pipe(htmlmin(minOption))    .pipe(gulp.dest(&quot;./public&quot;));});// 压缩 public/uploads 目录内图片gulp.task(&quot;compressImage&quot;, function() {var option = {    optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）    progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片    interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染    multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化};return gulp    .src(&quot;./public/medias/**/*.*&quot;)    .pipe(gulpif(!isScriptAll, changed(&quot;./public/medias&quot;)))    .pipe(gulpif(isDebug, debug({ title: &quot;Compress Images:&quot; })))    .pipe(plumber())    .pipe(imagemin(option))    .pipe(gulp.dest(&quot;./public&quot;));});// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器gulp.task(&quot;build&quot;,gulp.series(    &quot;clean&quot;,    &quot;generate&quot;,    &quot;compressHtml&quot;,    &quot;compressCss&quot;,    &quot;compressJs&quot;,    &quot;compressImage&quot;,    gulp.parallel(&quot;deploy&quot;)));// 默认任务gulp.task(&quot;default&quot;,gulp.series(    &quot;clean&quot;,    &quot;generate&quot;,    gulp.parallel(&quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressImage&quot;, &quot;compressJs&quot;)));//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</code></pre><p>最后 <code>hexo clean</code> &amp;&amp; <code>hexo g</code> &amp;&amp; <code>gulp</code> &amp;&amp; <code>hexo d</code> 就可以了</p><blockquote><p>注意，很可能你会运行到第三步，也就是运行gulp压缩命令时会报错，如图所示：</p></blockquote><p><img src="./medias/loading.gif" data-original="https://pic1.superbed.cn/item/5de8f5c7f1f6f81c50d22b40.jpg" alt="错误"></p><p>那是因为gulp安装的本地版本和hexo自带的版本不对应导致，第三步gulp压缩可以用下面命令强制使用本地版本：</p><pre><code>node ./node_modules/gulp/bin/gulp.js</code></pre><p><img src="./medias/loading.gif" data-original="https://pic1.superbed.cn/item/5de8f61cf1f6f81c50d23c80.jpg" alt="gulp 成功"></p><h4 id="（4）github-和-coding-双部署"><a href="#（4）github-和-coding-双部署" class="headerlink" title="（4）github 和 coding 双部署"></a>（4）github 和 coding 双部署</h4><blockquote><p>部署到 <code>Coding Pages</code> 的好处：国内访问速度更快，可以提交百度收录</p><p>因为<code>GitHub</code> 禁止了百度的爬取</p><p>问题来了！！！</p><p>我是不是又要重新写配置步骤？懒了，还是简单描述一下过程吧！</p></blockquote><h5 id="A、创建项目"><a href="#A、创建项目" class="headerlink" title="A、创建项目"></a>A、创建项目</h5><p> <a href="https://coding.net/" target="_blank" rel="noopener">Coding 官网</a>点击个人版登陆，没有账号就注册一个并登录，由于 <code>Coding</code> 已经被腾讯收购了，所以登录就会来到腾讯云开发者平台，点击创建项目。</p><p> 项目名称建议和你的用户名一致，这样做的好处是：到时候可以直接通过 <code>user_name.coding.me</code> 访问你的博客，如果项目名与用户名不一致，则需要通过 <code>user_name.coding.me/project_name</code> 才能访问，项目描述可以随便写。</p><h5 id="B、配置公钥"><a href="#B、配置公钥" class="headerlink" title="B、配置公钥"></a>B、配置公钥</h5><p> 配置 <code>SSH</code> 公钥方法与 <code>GitHub Pages</code> 的方式差不多，点击你的头像，依次选择<code>【个人设置】-【SSH公钥】-【新增公钥】</code></p><p> 前面部署到 <code>GitHub Pages</code> 的时候就已经有了一对公钥，我们直接将该公钥粘贴进去就行，公钥名称可以随便写，选中永久有效选项。</p><blockquote><p>PS：公钥储存位置一般在 <code>C:\Users\用户名\.ssh</code> 目录下的 <code>id_rsa.pub</code> 文件里，用记事本打开复制其内容即可</p></blockquote><p>添加公钥后，我们可以右键 <code>Get Bash</code>，输入以下命令来检查是否配置成功：</p><pre><code>ssh -T git@git.coding.net</code></pre><p><img src="./medias/loading.gif" data-original="https://pic.superbed.cn/item/5de8ff99f1f6f81c50d48d18.jpg" alt="成功配置"></p><h5 id="C、配置-config-yml"><a href="#C、配置-config-yml" class="headerlink" title="C、配置 _config.yml"></a>C、配置 _config.yml</h5><p>进入你的项目，在右下角有选择连接方式，选择 <code>SSH</code> 方式（<code>HTTPS</code> 方式也可以，但是这种方式有时候可能连接不上，<code>SSH</code> 连接不容易出问题），一键复制，然后打开你本地博客根目录的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 关键字，添加 <code>coding</code> 地址：<code>coding: git@git.dev.tencent.com:user_name/user_name.git</code>，也就是刚刚复制的 <code>SSH</code> 地址。</p><p><img src="./medias/loading.gif" data-original="https://pic2.superbed.cn/item/5de901f8f1f6f81c50d5133c.jpg" alt="找到 `coding` 地址"></p><p><img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de902bcf1f6f81c50d5380c.jpg" alt="添加 `coding` 地址"></p><p>添加完成后先执行命令 <code>hexo clean</code> 清理一下缓存，然后执行命令 <code>hexo g -d</code> 将博客双线部署到 <code>Coding Pages</code> 和 <code>GitHub Pages</code>，如下图所示表示部署成功：</p><p><img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de903c6f1f6f81c50d57ba9.jpg" alt="配置 _config.yml 成功"></p><h5 id="D、开启-Coding-Pages"><a href="#D、开启-Coding-Pages" class="headerlink" title="D、开启 Coding Pages"></a>D、开启 Coding Pages</h5><p>进入你的项目，在代码栏下选择 <code>Pages</code> 服务，一键开启 <code>Coding Pages</code>，等待几秒后刷新网页即可看到已经开启的 <code>Coding Pages</code>，到目前为止，你就可以通过 <code>xxxx.coding.me</code>（比如我的是 <code>qinnian.coding.me</code> ）访问你的 <code>Coding Pages</code> 页面了</p><p><img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de90467f1f6f81c50d59aee.jpg" alt="Coding Pages"></p><h5 id="E、绑定域名"><a href="#E、绑定域名" class="headerlink" title="E、绑定域名"></a>E、绑定域名</h5><p>首先在你的域名 <code>DNS</code> 设置中添加一条 <code>CNAME</code> 记录指向 <code>xxxx.coding.me</code>，解析路线选择默认，将 <code>GitHub</code> 的解析路线改为境外，这样境外访问就会走 <code>GitHub</code>，境内就会走 <code>Coding</code>，也有人说它是智能解析，自动分配路线，如果解析路线都是默认，境外访问同样会智能选择走 <code>GitHub</code>，境内走 <code>Coding</code>，我没有验证过，有兴趣的可以自己试试。</p><p>然后点击静态 <code>Pages</code> 应用右上角的设置，进入设置页面，这里要注意，如果你之前已经部署到了 <code>GitHub Pages</code>并开启了 <code>HTTPS</code>，那么直接在设置页面绑定你自己的域名，<code>SSL/TLS</code> 安全证书就会显示申请错误，如下图所示，没有申请到 <code>SSL</code> 证书，当你访问你的网站时，浏览器就会提示不是安全连接。</p><p><img src="./medias/loading.gif" data-original="https://pic2.superbed.cn/item/5de90dcdf1f6f81c50d7bca8.jpg" alt="错误提示"></p><blockquote><p>申请错误原因是：在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败</p><p>正确的做法是：先去域名 <code>DNS</code> 把 <code>GitHub</code> 的解析暂停掉，然后再重新申请 <code>SSL</code> 证书，大约十秒左右就能申请成功，然后开启强制 <code>HTTPS</code> 访问</p></blockquote><p>这里也建议同时绑定有 <code>www</code> 前缀和没有 <code>www</code> 前缀的，然后设置其中一个为【首选】，另一个设置【跳转至首选】，这样不管用户是否输入 <code>www</code> 前缀都可以访问了</p><p>在博客资源引用的时候也要注意所有资源的 URL 必须是以 https:// 开头，不然浏览器依旧会提示不安全！</p><p><img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de915bbf1f6f81c50d95c3f.jpg" alt="成功"></p><h5 id="D、查看效果"><a href="#D、查看效果" class="headerlink" title="D、查看效果"></a>D、查看效果</h5><p><img src="./medias/loading.gif" data-original="https://pic2.superbed.cn/item/5de91a9cf1f6f81c50da399e.jpg" alt="qinnian.coding.me"></p><p><img src="./medias/loading.gif" data-original="https://pic3.superbed.cn/item/5de91b28f1f6f81c50da502c.jpg" alt="qinnian.github.io"></p><p>至此，我们的 Hexo 博客就成功双线部署到 <code>Coding Pages</code> 和 <code>GitHub Pages</code> 了！</p><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
